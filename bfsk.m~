%% BFSK
N = 1024; 
br = 1000;      %bit rate
bp= 1/br;       %bit period                                             
L = 16; %oversampling factor

Fc = 10000; %carrier frequency
Fs = 16*Fc;  %sampling frequency

signal_length = Fs/br;  %length of signal

bfsk_orig = binary_data(N); %get original bit data

% Get bits with signal length
bfsk_orig_signal = sync(bfsk_orig, signal_length);

t1=bp/signal_length:bp/signal_length:length(bfsk_orig)*(bp);  %time scaling
subplot(3,1,1);
plot(t1,bfsk_orig_signal,'lineWidth',2.5);grid on;
axis([ 0 bp*10 -.5 1.5]);
ylabel('amplitude(volt)');
xlabel(' time(sec)');
title('Transmitting Signal');

% Carrier Wave
f1 = Fc;
f2 = Fc/2;
t2 = bp/signal_length:bp/signal_length:bp; 
carrier1 = cos(2*pi*f1*t2);
carrier2 = cos(2*pi*f2*t2);

% Modulation               
bfsk_mod_signal=[];
for (i=1:1:length(bfsk_orig))
    if (bfsk_orig(i)==1)
        y = carrier1;
    else
        y = carrier2;
    end
    bfsk_mod_signal=[bfsk_mod_signal y];
end
subplot(3,1,2);
plot(t1,bfsk_mod_signal);
axis([ 0 bp*10 -1.5 1.5]);
xlabel('time(sec)');
ylabel('amplitude(volt)');
title('waveform for binary FSK modulation coresponding binary information');

% Demodulation
y1 = bfsk_mod_signal.*cos(2*pi*f1*t1);
y2 = bfsk_mod_signal.*cos(2*pi*f2*t1);
int1_bfsk = [];
for i = 0:signal_length:length(y1)-signal_length
    int_ = trapz(y1(i+(signal_length/2):i+(signal_length/2)+1));
    int1_bfsk = [int1_bfsk int_];
end
int1_bfsk = [];
for i = 0:signal_length:length(y1)-signal_length
    int_ = trapz(y1(i+(signal_length/2):i+(signal_length/2)+1));
    int1_bfsk = [int1_bfsk int_];
end



ss=length(t2);
mn=[];
for n=ss:ss:length(bfsk_mod_signal)
  y1=cos(2*pi*f1*t2);                    % carrier siignal for information 1
  y2=cos(2*pi*f2*t2);                    % carrier siignal for information 0
  mm=y1.*m((n-(ss-1)):n);
  mmm=y2.*m((n-(ss-1)):n);
  z1=trapz(t2,mm)                                             % intregation 
  z2=trapz(t2,mmm)                                            % intregation 
  zz1=round(2*z1/bp)
  zz2= round(2*z2/bp)
  if(zz1>A/2)      % logic lavel= (0+A)/2 or (A+0)/2 or 2.5 ( in this case)
    a=1;
  else(zz2>A/2)
    a=0;
  end
  mn=[mn a];
end
disp(' Binary information at Reciver :');
disp(mn);

%XXXXX Representation of binary information as digital signal which achived 
%after demodulation XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
bit=[];
for n=1:length(mn);
    if mn(n)==1;
       se=ones(1,160);
    else mn(n)==0;
        se=zeros(1,160);
    end
     bit=[bit se];
end
t4=bp/signal_length:bp/signal_length:length(mn)*bp;
subplot(3,1,3)
plot(t4,bit,'LineWidth',2.5);grid on;
axis([ 0 bp*10 -.5 1.5]);
ylabel('amplitude(volt)');
xlabel(' time(sec)');
title('recived information as digital signal after binary FSK demodulation');


%% FUNCTIONS

function sync_signal = sync(data_bits, signal_length)
    ook_orig_signal = [];
    for n=1:1:length(data_bits)
        if data_bits(n)==1;
            se=ones(1,signal_length);
        else data_bits(n)==0;
            se=zeros(1,signal_length);
        end
        ook_orig_signal=[ook_orig_signal se];
    end
    sync_signal = ook_orig_signal;
end

